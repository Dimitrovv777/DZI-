Зад.1
Имате дадена ER диаграма. Информацията в таблиците е въведена предварително. След като анализирате данните в базата от данни colonial_journey, създайте следните заявки. Съобразете се с посочените примери.

1. Извлечете от базата данни всички карти за пътуване. Сортирайте резултатите по номер на картата във възходящ ред.
ИМА СНИКМА !!
2. Изведете от базата данни, всички колонисти. Изведете първо име и фамилия в една колона, както е показано на снимката. Сортирайте резултатите на колона full_name и колона id по възходящ ред.
ИМА СНИМКА !!
3. Извлечете от базата данни най-бързия космически кораб и името на дестинацията му.
ИМА СНИМКА !!

Отг.
USE colonial_journey;

1. SELECT *

FROM travel_cards

ORDER BY card_number ASC;

 2.

SELECT CONCAT(first_name, ' ', last_name) AS full_name, id

FROM colonists

ORDER BY full_name ASC, id ASC;

3.

SELECT s.name, sp.name

FROM spaceships s

JOIN journeys j ON s.id = j.spaceship_id

JOIN spaceport sp ON j.destination_spaceport_id = sp.id

ORDER BY s.light_speed_rate DESC

LIMIT 1;

Зад.2
Посочете верния отговор за създаване на заявка, която извлича името на отдела от таблицата departments.
Отг.
 SELECT name FROM departments;

Зад.3
Посочете правилния код за създаване на заявка, която извлича всички записи от таблицата departments.
Отг.
 SELECT * FROM departments;

Зад.4
Посочете резултата от изпълнението на следната заявка:

SELECT employee_id AS id, first_name, last_name

  FROM employees;
Отг.
Колоната employee_id ще се преименува на id.

Зад.5
Посочете резултата от изпълнението на следната заявка:

UPDATE employees

set last_name = 'Dani'

WHERE employee_id = '1';

Отг.
Ще промени таблицата и на колоната фамилно име на служител с номер 1 ще присвои име Dani.

Зад.6
Във вашата база от данни Soft_uni имате създадена таблица Employees с 500 записа. Необходимо е да добавите нова колона с име salary. Напишете заявка за добавяне на колоната в таблица employees. 
Отг.
ALTER TABLE employees

ADD salary DECIMAL;

Зад.7
Създайте таблица cities, която да съдържа две колони - id и name, като прецените типа данни, който да укажете за двете колони. Колоната id да бъде първичен ключ.
Отг.
CREATE TABLE cities

(

city_id INT PRIMARY KEY,

name VARCHAR(50)

);

Зад.8
Посочете резултата от изпълнение на следната заявка: 

SELECT * FROM projects WHERE end_date IS NULL;
Отг.
Извежда само тези записи, които са NULL в колоната крайна дата.

Зад.9
Имате представена подзаявка за намиране служителите от отдел финанси и извеждане на всички колони от таблицата. Поставете липсващите думи, за да направите работещ код.
Отг.
SELECT * FROM employees
[WHERE] department_id [IN]

  (

   SELECT department_id
    [FROM] departments

    [WHERE] name = 'Finance'  );

Зад.10
Посочете резултата от изпълнението на следната заявка: 

UPDATE employees

SET salary = salary*1.10

WHERE department_id = 7;
Отг.
Ще промени таблицата, като стойността на заплатата ще бъде променена само на записите, които са с номер на отдел 7.

Зад.11
Посочете резултата от изпълнението на следната заявка:

SELECT first_name, last_name, salary FROM employees;
Отг.
Извлича първо име, фамилия и заплата на служителите

Зад.12
Следната заявка ще изтрие всички записи от таблицата.

DELETE FROM `employees`

WHERE `employee_id` = 1;
Отг.
Неистина

Зад.13
В база от данни People имате таблица persons, състояща се от 4 колони и те са следните:

PersonID int NOT NULL,

FirstName varchar(25) NOT NULL,

email VARCHAR(10),

 Age int );

В таблицата имате достатъчен брой записи, които не трябва да загубите. Вашият мениджър ви поставя задача да промените броя на символите на колоната е-мейл, като ги увеличите на 100. Напишете заявка за промяна на колоната и съответно на таблицата persons.
Отг.
ALTER TABLE persons
MODIFY COLUMN email VARCHAR(100);

Зад.14
Дефинирайте понятието псевдоним в базите от данни и посочете за какво се използва.
Отг.
Псевдонимите преименуват таблица или заглавие на колона. Използват се, за да се осъществи връзка между  таблици по свързващото условие.

Зад.15
Изберете липсващите думи в следната заявка, така че да получите служителите със заплата по-голяма от 50000.
Отг.
Изберете липсващите думи в следната заявка, така че да получите служителите със заплата по-голяма от 50000.

[SELECT] e.employee_id, e.first_name, e.salary, d.name [FROM ] employees AS e

JOIN departments AS d ON d.department_id = e.department_id

[WHERE] salary > 50000

[ORDER BY] d.department_id desc;

Зад.16
Посочете какво прави клаузата INNER JOIN:
Отг.
Връща всички съответстващи редове в таблиците. Ако има несъответстващи редове, тогава те не биват прибавяни към множеството.

Зад.17
В дадения код имате обединяване на заявки чрез клаузата UNION. Попълнете чрез влачене липсващите думи в кода, така че да получите работеща заявка, която да извежда данни от база от данни geography и да сортира колона name.
Отг.
(select river_name as name [FROM] rivers)
  UNION

([SELECT] mountain_range from mountains)

[ORDER BY] name ASC LIMIT 100

Зад.18
Пояснете какво прави връзката RIGHT OUTER JOIN.
Отг.
Връща всички записи в дясната таблица и всички съответвстващи записи в лявата таблица. Ако има несъответстващ запис в лявата таблица ,тогава той получава стойност NULL.

Зад.19
Следната заявка извлича от таблица projects колоната с крайна дата на проекти, която е NULL

UPDATE projects

   SET end_date = '2017-05-29'

 WHERE end_date IS NULL;
Отг.
Неистина

Зад.20
Допишете следната заявка, така че да изведе служителите със заплати между 20000 и 30000.

SELECT `last_name`, `salary` FROM `employees`

Отг.
SELECT `last_name`, `salary`FROM `employees`

WHERE `salary` BETWEEN 20000 AND 22000;

Зад.21
Посочете верния изход при изпълнение на следната заявка.

SELECT * FROM employees AS e

  JOIN departments AS d ON d.department_id = e.department_id
Отг.
Таблица employees ще се преименува на е, а таблица departments ще се преименува на d и по този начин ще се осъществи връзката между двете таблици по свързващото условие колона department_id






























































