Зад.1
Ограниченията задават правила за данните в дадена таблица. Посочете вярното твърдение за ограничението PRIMARY KEY.
Отг.
идентифицира уникално всеки запис в таблицата

Зад.2
Имате заявка, която създава таблица Persons и трябва да се постави ограничение годините на хората да са по-големи от 20. От трите посочени думи, изберете ограничението, което трябва да поставите за да решите коректно примера. 
Отг.
CHECK

Зад.3
Имате код за създаване на таблици, които реализират връзка между таблици едно към едно. Открийте липсващите думи и ги поставете в текста чрез влачене, така че да получите коректно работещ код.
Отг.
CREATE TABLE drivers(

  driver_id INT [PRIMARY KEY],

  driver_name VARCHAR(50)

);

CREATE TABLE cars(

  car_id INT PRIMARY KEY,

  driver_id INT UNIQUE,

  [CONSTRAINT] fk_cars_drivers [FOREIGN KEY]
  (driver_id) [REFERENCES] drivers(driver_id)

);

Зад.4
Имате заявка, която свързва две таблици от база от данни Orders и Persons. От изброените 6 думи, изберете три верни, с които да получите работеща заявка и ги поставете в дадения код.
Отг.
CREATE TABLE Orders(

    OrderID int NOT NULL,

    OrderNumber int NOT NULL,

    PersonID int,

    [PRIMARY KEY] (OrderID),

    [FOREIGN KEY] (PersonID) [REFERENCES] Persons(PersonID)

);

Зад.5
В посочения пример имате заявка за създаване на таблица persons с колони person_id, first_name, passport_id и salary. Моля определете и изберете липсващите думи за всяка колона от таблицата.
Отг.
CREATE TABLE persons(

person_id  [INT] PRIMARY KEY,

first_name [VARCHAR(50)],

salary [DECIMAL(8,2)],

passport_id INT UNIQUE,

CONSTRAINT fk_persons_passports FOREIGN KEY(passport_id) REFERENCES passports(passport_id)

);

Зад.6
Създайте таблица cities, която да съдържа две колони - id и name, като прецените типа данни, който да укажете за двете колони. Колоната id да бъде първичен ключ.
Отг.
CREATE TABLE cities (

  id INT PRIMARY KEY,

  name VARCHAR(255) NOT NULL

);

Зад.7
Моля посочете вярното твърдение за дефиниране на понятието бази от данни.
Отг.
База от данни се нарича всяка организирана колекция от данни (информация).

зад.8
Като използвате дадената ER диаграма, напишете заявките за създаване база данни online_store и за създаване на таблиците в нея.
Отг.
CREATE DATABASE online_store;

 

USE online_store;

 

CREATE TABLE cities(

 

city_id INT PRIMARY KEY,

 

name VARCHAR(50)

 

);

 

 

 

CREATE TABLE customers(

 

customer_id INT PRIMARY KEY,

 

name VARCHAR(50),

 

birthday DATE,

 

city_id INT,

 

foreign key (city_id) references cities(city_id)

 

 

);

 

 

 

CREATE TABLE orders(

 

order_id INT PRIMARY KEY,

 

customer_id INT,

 

 

 

 

foreign key (customer_id) references customers(customer_id)

 

);

 

 

 

CREATE TABLE item_types(

 

item_type_id INT PRIMARY KEY,

 

name VARCHAR(50)

 

);

 

 

 

CREATE TABLE items(

 

item_id INT PRIMARY KEY,

 

name VARCHAR(50),

 

item_type_id INT,

 

foreign key (item_type_id) references item_types(item_type_id)

 

);

 

 

 

CREATE TABLE order_items(

 

order_id  INT,

 

item_id INT,

 PRIMARY KEY (order_id, item_id),

foreign key (order_id) references orders(order_id),

foreign key (item_id) references items(item_id)

 

);

Зад.9
Моля, посочете вярното твърдение за връзка едно към много.
Отг.
При тази връзка един запис от първата таблица съответства на много записи от втората таблица.

Зад.10
Имате код за създаване на таблици. Посочете вида на връзката, която се получава.

CREATE TABLE employees(

  employee_id INT PRIMARY KEY,
  employee_name VARCHAR(50)

);

CREATE TABLE projects(
  project_id INT PRIMARY KEY,
  project_name VARCHAR(50)

);

CREATE TABLE employees_projects(
  employee_id INT,
  project_id INT,

  CONSTRAINT pk_employees_projects

  PRIMARY KEY(employee_id, project_id),

  CONSTRAINT fk_employees_projects_employees

  FOREIGN KEY(employee_id)

  REFERENCES employees(employee_id),

  CONSTRAINT fk_employees_projects_projects

  FOREIGN KEY(project_id)

  REFERENCES projects(project_id)

);
Отг.
много към много

Зад.11
Създайте таблица people, която да съдържа следните колони city_id, first_name, last_name, и salary, като прецените типа данни, който да укажете за колоните. Колоната city_id да бъде първичен ключ.
Отг.
CREATE TABLE persons (

  city_id INT PRIMARY KEY,

  FirstName VARCHAR(50) NOT NULL,

  LastName VARCHAR(50) NOT NULL

);

Зад.12
Посочете вярното твърдение за по-долу посочения код:

CREATE TABLE Persons(

            ID int NOT NULL,

            FirstName varchar(255) NOT NULL,

            LastName varchar(255) NOT NULL,

          );
Отг.
Създава таблица с колони ID от тип цяло число, FirstName от текстов тип и LastName от текстов тип и не позволява в клетките да има празна стойност.

Зад.13
Моля, посочете вярното твърдение за връзка много към много.
Отг.
При тази връзка на един запис от първата таблица съответстват много записи от втората таблица и обратно.

зад.14
Имате пример за създаване на първичен ключ на база данни в една колона в таблица Persons:

CREATE TABLE Persons(

            PersonID int NOT NULL,

            FirstName varchar(255) NOT NULL,

            LastName varchar(255) NOT NULL,

            Age int

     

Допишете реда в който трябва да се създаде първичен ключ, като заявката работи коректно.
Отг.
CREATE TABLE Persons (

  PersonID INT NOT NULL PRIMARY KEY,

  FirstName VARCHAR(255) NOT NULL,

  LastName VARCHAR(255) NOT NULL,

  Age INT

);

Зад.15
В посочения пример имате заявка за създаване на таблица persons с колони person_id, first_name, passport_id и salary. Моля открийте и изберете липсващите думи за всяка колона от таблицата.
CREATE TABLE persons(

person_id  [INT] PRIMARY KEY,

first_name [VARCHAR(50)],

salary [DECIMAL(8,2)],

passport_id INT UNIQUE,

CONSTRAINT fk_persons_passports FOREIGN KEY(passport_id) REFERENCES passports(passport_id)

);

Зад.16
Имате заявка за създаване на таблица cities с две колони city_id и name. Посочете липсващите думи в кода, така че да получите коректно работеща заявка.
Отг.
[CREATE] TABLE cities(

city_id [INT] PRIMARY KEY,

name [VARCHAR(50)]

Зад.17
Имате код за създаване на две таблици. Посочете вида на връзката, която се получава.

CREATE TABLE mountains(

  mountain_id INT PRIMARY KEY,

  mountain_name VARCHAR(50)

);

CREATE TABLE peaks(

  peak_id INT PRIMARY KEY,

  mountain_id INT,

  CONSTRAINT fk_peaks_mountains

  FOREIGN KEY (mountain_id)
  REFERENCES mountains(mountain_id)
);
Отг.
Едно към Много

Зад.18
Ограниченията задават правила за данните в дадена таблица. Посочете вярното твърдение за ограничението NOT NULL.
Отг.
не позволява в клетка да има празна стойност














































